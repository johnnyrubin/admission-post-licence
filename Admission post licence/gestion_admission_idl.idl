/**
* Contrat IDL d'un système permettant de gérer l'admission post-licence
*/
module AdmissionPostLicence
{
    //Enumération utiles pour les différents choix
    enum etatCandidature { nonValide, valide, cloture };
    enum decisionCandidat { ouiDefinitif, ouiMais, nonMais, nonDefinitif };
    enum decisionMaster { admis, listeAttente, refuser };

    // Structure contenant les résultats d'un semestre
    struct resultat {
        string code;
        float moyenne;
        short position;
    };
    // Cette séquence correspond aux résultats des six semestres d'une licence
    typedef sequence<resultat, 6> resultats;

    //Structure d’identification d’un étudiant
    struct identite {
        string ine;
        string nom;
        string prenom;
        string universite;
        string licence;
    };
    
    //Structure des résultats de licence d’un étudiant
    struct resultatsEtudiant {
        identite etudiant;
        resultats resultatsSemestres;
    };
	
    // Contient les données basiques d'une candidature
    struct candidature {
        identite etudiant;
        string master;
        string universite;
        short ordre;
        etatCandidature etat;
        decisionCandidat decisionC;
        decisionMaster decisionM;
    };
    typedef sequence<candidature> candidatures;
    
    //Liste de plusieurs masters
    typedef sequence<string> listeMasters;
    
    // Accréditation permettant de savoir si tel master est disponible dans telle université
    struct accreditation {
        string universite;
        listeMasters master;
    };
    typedef sequence<accreditation> accreditations;
	
	// Contient la liste des noms des universités
	typedef sequence<string> universites;

    // Exceptions
    exception EtudiantInconnu { string raison; long id; };
    exception MasterInconnu { string raison; long id; };
    exception CandidatureInconnu {string raison; long id;};

    // Point d’accès aux informations fournies aux étudiants
    interface GestionEtudiant
    {
        //Nom de la gestion étudiante
        readonly attribute string nom;

        // Soumission d’une candidature à un master
        void soumettreCandidature(in candidature c) raises (MasterInconnu);
        
        // Retourne les résultats de l’étudiant dont l’identité est fournie
        resultatsEtudiant recupererResultats(in identite etudiant) raises (EtudiantInconnu);

        // Retourne l’état des candidatures de l’étudiant et leur statut
        candidatures consulterEtatVoeux(in identite etudiant) raises (EtudiantInconnu);

        // Permet à l’étudiant d’accepter ou refuser une proposition
        void modifierDecision(in candidature c, in decisionCandidat dc);

        //Permet à l’étudiant de se connecter 
        identite seConnecter(in string ine, in string mdp) raises (EtudiantInconnu);
    };
	
	// Liste des IOR des gestion étudiants enregistrés auprès du rectorat
	typedef sequence<string> gestionEtudiants;

    // Point d’accès aux informations fournies aux responsables de formation et aux
    // autres entités
    interface Master
    {     
        //Nom du master
        readonly attribute string nom;
		
		// université d'appartenance
		readonly attribute string universite;
        
        // Retourne les candidatures au master ainsi que leurs états
        candidatures consulterEtatCandidatures();

        // Modifie la décision d’une formation sur une candidature
        void modifierDecision(in candidature c, in decisionMaster dm) raises (CandidatureInconnu);

        // Vérifie que la licence soit compatible avec le master
        boolean verifierPrerequis(in string licence) raises (MasterInconnu);
    };
	
	// Liste des IOR des masters enregistrés auprès du rectorat
	typedef sequence<string> masters;

    // Code métier des Rectorats
    interface Rectorat
    {
        // Nom du rectorat
        readonly attribute string nom;

        // Enregistre une candidature auprès du rectorat, vérifie que l’étudiant puisse
        // candidater au master grâce à Master
        void creerCandidature(in candidature c);

        // Retourne la liste des candidatures à un master
        candidatures recupererCandidaturesMaster(in string master) raises (MasterInconnu);

        // Retourne la liste des candidatures d’un étudiant
        candidatures recupererCandidaturesEtudiant(in identite etudiant) raises (EtudiantInconnu);

        // Permet de modifier l’état d'une candidature
        void modifierCandidature(in candidature candidature) raises (CandidatureInconnu); 

        // Liste qui contient tous les gestions étudiantes du rectorat
        gestionEtudiants getListeGestEtu();

        // Fonction qui permet d'enregistrer une gestion etudiante auprès du rectorat
        void enregistrerGE(in string ior, in string universite);

        // Liste qui contient tous les masters d'une université
        masters getListeMaster(in string u);

        // Fonction qui permet d'enregistrer un master auprès du rectorat
        void enregistrerMaster(in string ior);
		
		// Liste des universités qui ont enregistrées des formations auprès du rectorat
		universites getListeUniversite(); 
    };
	
	// Liste des IOR des rectorats enregistrés auprès du ministère
	typedef sequence<string> rectorats;

    interface Ministere
    {
        // Fourni la liste des accréditations (sert de référentiel aux étudiants)
        accreditations recupererAccreditations();

        // Transfere une candidature d’un rectorat à un autre
        void transfererCandidature(in candidature c);

        // Transfere la décision d’un candidat vers un autre rectorat
        void transfererDecision(in candidature r) raises (CandidatureInconnu); 

        // Liste qui contient tous les rectorats du ministère
        rectorats getListeRectorat();

        // Fonction qui permet d'enregistrer un rectorat auprès du ministère
        void enregistrerRectorat(in string ior);
    };
};


